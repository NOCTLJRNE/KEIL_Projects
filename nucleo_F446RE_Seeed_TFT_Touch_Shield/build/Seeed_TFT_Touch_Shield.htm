<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\Seeed_TFT_Touch_Shield.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\Seeed_TFT_Touch_Shield.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Jun 02 22:34:28 2016
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp_TFT &rArr; SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[14]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SysTick_Handler</a><BR>
 <LI><a href="#[27]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC_IRQHandler</a><BR>
 <LI><a href="#[134]">mbed_die</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">mbed_assert_internal</a><BR>
 <LI><a href="#[f8]">gpio_init_out</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">mbed_assert_internal</a><BR>
 <LI><a href="#[13a]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">mbed_assert_internal</a><BR>
 <LI><a href="#[e5]">Set_GPIO_Clock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e6]">error</a><BR>
 <LI><a href="#[136]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">mbed_assert_internal</a><BR>
 <LI><a href="#[135]">gpio_dir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">mbed_assert_internal</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[28]">CAN1_TX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[67]">CEC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[45]">FMC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[6a]">I2C4_Error_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[69]">I2C4_Event_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[66]">QuadSPI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[65]">SAI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[46]">SDIO_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[68]">SPDIF_RX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[63]">SPI4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[17]">TAMP_STAMP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[41]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[74]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[83]">TextDisplay::background(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10backgroundEt) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[83]">TextDisplay::background(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10backgroundEt) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[83]">TextDisplay::background(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10backgroundEt) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[83]">TextDisplay::background(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10backgroundEt) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[82]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10foregroundEt) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[82]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10foregroundEt) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[82]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10foregroundEt) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[82]">TextDisplay::foreground(unsigned short)</a> from textdisplay.o(i._ZN11TextDisplay10foregroundEt) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[80]">TextDisplay::_putc(int)</a> from textdisplay.o(i._ZN11TextDisplay5_putcEi) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[80]">TextDisplay::_putc(int)</a> from textdisplay.o(i._ZN11TextDisplay5_putcEi) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[88]">GraphicsDisplay::putp(int)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay4putpEi) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[88]">GraphicsDisplay::putp(int)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay4putpEi) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[88]">GraphicsDisplay::putp(int)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay4putpEi) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[85]">GraphicsDisplay::rows()</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay4rowsEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[87]">GraphicsDisplay::window(unsigned, unsigned, unsigned, unsigned)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay6windowEjjjj) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[89]">GraphicsDisplay::blitbit(int, int, int, int, const char*)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay7blitbitEiiiiPKc) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[89]">GraphicsDisplay::blitbit(int, int, int, int, const char*)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay7blitbitEiiiiPKc) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[89]">GraphicsDisplay::blitbit(int, int, int, int, const char*)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay7blitbitEiiiiPKc) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[86]">GraphicsDisplay::columns()</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay7columnsEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[84]">GraphicsDisplay::character(int, int, int)</a> from graphicsdisplay.o(i._ZN15GraphicsDisplay9characterEiii) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[8e]">SPI_TFT_ILI9341::cls()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93413clsEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8e]">SPI_TFT_ILI9341::cls()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93413clsEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[8c]">SPI_TFT_ILI9341::rows()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93414rowsEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8c]">SPI_TFT_ILI9341::rows()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93414rowsEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[8a]">SPI_TFT_ILI9341::_putc(int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415_putcEi) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8a]">SPI_TFT_ILI9341::_putc(int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415_putcEi) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[90]">SPI_TFT_ILI9341::pixel(int, int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415pixelEiii) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[90]">SPI_TFT_ILI9341::pixel(int, int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415pixelEiii) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[91]">SPI_TFT_ILI9341::width()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415widthEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[91]">SPI_TFT_ILI9341::width()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415widthEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[92]">SPI_TFT_ILI9341::height()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416heightEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[92]">SPI_TFT_ILI9341::height()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416heightEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[8f]">SPI_TFT_ILI9341::locate(int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416locateEii) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8f]">SPI_TFT_ILI9341::locate(int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416locateEii) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[93]">SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416windowEjjjj) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[93]">SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416windowEjjjj) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[8d]">SPI_TFT_ILI9341::columns()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93417columnsEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8d]">SPI_TFT_ILI9341::columns()</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93417columnsEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[8b]">SPI_TFT_ILI9341::character(int, int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93419characterEiii) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[8b]">SPI_TFT_ILI9341::character(int, int, int)</a> from spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93419characterEiii) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[77]">SeeedStudioTFTv2::~SeeedStudioTFTv2()</a> from main.o(i._ZN16SeeedStudioTFTv2D1Ev) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[77]">SeeedStudioTFTv2::~SeeedStudioTFTv2()</a> from main.o(i._ZN16SeeedStudioTFTv2D1Ev) referenced from main.o(i.__sti___8_main_cpp_TFT)
 <LI><a href="#[72]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[94]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[95]">mbed::SPI::write(int)</a> from SPI.o(i._ZN4mbed3SPI5writeEi) referenced from SPI.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[7e]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[7e]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[7e]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[7e]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[7e]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7f]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[7f]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[7f]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[7f]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[7f]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7d]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[7d]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[7d]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
 <LI><a href="#[7d]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
 <LI><a href="#[7d]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[96]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[97]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[98]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from textdisplay.o(.constdata__ZTV11TextDisplay)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[99]">__sti___8_main_cpp_TFT</a> from main.o(i.__sti___8_main_cpp_TFT) referenced from main.o(.init_array)
 <LI><a href="#[6f]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[70]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6e]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[75]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[76]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0vfprintf)
 <LI><a href="#[71]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6b]">main</a> from retarget.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[73]">timer_irq_handler</a> from hal_tick.o(i.timer_irq_handler) referenced from hal_tick.o(i.HAL_InitTick)
 <LI><a href="#[7b]">us_ticker_clear_interrupt</a> from us_ticker.o(i.us_ticker_clear_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[7a]">us_ticker_disable_interrupt</a> from us_ticker.o(i.us_ticker_disable_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[78]">us_ticker_init</a> from us_ticker.o(i.us_ticker_init) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[79]">us_ticker_read</a> from us_ticker.o(i.us_ticker_read) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[7c]">us_ticker_set_interrupt</a> from us_ticker.o(i.us_ticker_set_interrupt) referenced from us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a3]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9f]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a0]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_Event_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>QuadSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initio_oe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[76]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fputc_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fputc &rArr; _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vfprintf)
</UL>
<P><STRONG><a name="[ff]"></a>setbuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[12d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[10b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[a8]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[aa]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[9a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_TFT
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[74]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[151]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[152]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[a9]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[6e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[113]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[c1]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[117]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[a1]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[b2]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[c0]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[154]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[155]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[156]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[158]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; $Super$$main &rArr; SPI_TFT_ILI9341::fillcircle(int, int, int, int) &rArr; SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d9]"></a>HAL_GPIO_Init</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>

<P><STRONG><a name="[144]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>HAL_InitTick</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, hal_tick.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1508 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[d5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 232 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[da]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 972 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[db]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[dc]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[df]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d0]"></a>NVIC_SetVector</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e3]"></a>SetSysClock</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e4]"></a>SetSysClock_PLL_HSE</STRONG> (Thumb, 188 bytes, Stack size 184 bytes, system_stm32f4xx.o(i.SetSysClock_PLL_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[e5]"></a>Set_GPIO_Clock</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, pinmap.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[13f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[83]"></a>TextDisplay::background(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, textdisplay.o(i._ZN11TextDisplay10backgroundEt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 4]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[82]"></a>TextDisplay::foreground(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, textdisplay.o(i._ZN11TextDisplay10foregroundEt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 4]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[80]"></a>TextDisplay::_putc(int)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, textdisplay.o(i._ZN11TextDisplay5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TextDisplay::_putc(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
</UL>
<P><STRONG><a name="[e7]"></a>TextDisplay::TextDisplay__sub_object(const char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, textdisplay.o(i._ZN11TextDisplayC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
</UL>

<P><STRONG><a name="[88]"></a>GraphicsDisplay::putp(int)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay4putpEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GraphicsDisplay::putp(int)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[85]"></a>GraphicsDisplay::rows()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay4rowsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GraphicsDisplay::rows()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[87]"></a>GraphicsDisplay::window(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay6windowEjjjj))
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[89]"></a>GraphicsDisplay::blitbit(int, int, int, int, const char*)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay7blitbitEiiiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GraphicsDisplay::blitbit(int, int, int, int, const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[86]"></a>GraphicsDisplay::columns()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay7columnsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GraphicsDisplay::columns()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[84]"></a>GraphicsDisplay::character(int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplay9characterEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GraphicsDisplay::character(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
</UL>
<P><STRONG><a name="[ec]"></a>GraphicsDisplay::GraphicsDisplay__sub_object(const char*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, graphicsdisplay.o(i._ZN15GraphicsDisplayC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::foreground(unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::background(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[ed]"></a>SPI_TFT_ILI9341::fillcircle(int, int, int, int)</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI934110fillcircleEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SPI_TFT_ILI9341::fillcircle(int, int, int, int) &rArr; SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8e]"></a>SPI_TFT_ILI9341::cls()</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93413clsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::cls() &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[f2]"></a>SPI_TFT_ILI9341::line(int, int, int, int, int)</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93414lineEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SPI_TFT_ILI9341::line(int, int, int, int, int) &rArr; SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[f4]"></a>SPI_TFT_ILI9341::rect(int, int, int, int, int)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93414rectEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SPI_TFT_ILI9341::rect(int, int, int, int, int) &rArr; SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8c]"></a>SPI_TFT_ILI9341::rows()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93414rowsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_TFT_ILI9341::rows()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[8a]"></a>SPI_TFT_ILI9341::_putc(int)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_TFT_ILI9341::_putc(int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[f3]"></a>SPI_TFT_ILI9341::hline(int, int, int, int)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415hlineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::hline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::rect(int, int, int, int, int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::line(int, int, int, int, int)
</UL>

<P><STRONG><a name="[90]"></a>SPI_TFT_ILI9341::pixel(int, int, int)</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415pixelEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::pixel(int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[ee]"></a>SPI_TFT_ILI9341::vline(int, int, int, int)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415vlineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::rect(int, int, int, int, int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::line(int, int, int, int, int)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillcircle(int, int, int, int)
</UL>

<P><STRONG><a name="[91]"></a>SPI_TFT_ILI9341::width()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93415widthEv))
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[13e]"></a>SPI_TFT_ILI9341::circle(int, int, int, int)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416circleEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_TFT_ILI9341::circle(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[92]"></a>SPI_TFT_ILI9341::height()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416heightEv))
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[8f]"></a>SPI_TFT_ILI9341::locate(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416locateEii))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[93]"></a>SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416windowEjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[ef]"></a>SPI_TFT_ILI9341::wr_cmd(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93416wr_cmdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillrect(int, int, int, int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::pixel(int, int, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::cls()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::character(int, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[8d]"></a>SPI_TFT_ILI9341::columns()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93417columnsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_TFT_ILI9341::columns()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[f5]"></a>SPI_TFT_ILI9341::fillrect(int, int, int, int, int)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93418fillrectEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPI_TFT_ILI9341::fillrect(int, int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[13c]"></a>SPI_TFT_ILI9341::set_font(unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93418set_fontEPh))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8b]"></a>SPI_TFT_ILI9341::character(int, int, int)</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93419characterEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SPI_TFT_ILI9341::character(int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
</UL>
<P><STRONG><a name="[f6]"></a>SPI_TFT_ILI9341::tft_reset()</STRONG> (Thumb, 1702 bytes, Stack size 32 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI93419tft_resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SPI_TFT_ILI9341::tft_reset() &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[fb]"></a>SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicsDisplay::GraphicsDisplay__sub_object(const char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[15a]"></a>SPI_TFT_ILI9341::SPI_TFT_ILI9341__sub_object(PinName, PinName, PinName, PinName, PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, spi_tft_ili9341.o(i._ZN15SPI_TFT_ILI9341C1E7PinNameS0_S0_S0_S0_S0_PKc), UNUSED)

<P><STRONG><a name="[fd]"></a>SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, seeedstudiotftv2.o(i._ZN16SeeedStudioTFTv2C1E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_TFT
</UL>

<P><STRONG><a name="[15b]"></a>SeeedStudioTFTv2::SeeedStudioTFTv2__sub_object(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, seeedstudiotftv2.o(i._ZN16SeeedStudioTFTv2C1E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_), UNUSED)

<P><STRONG><a name="[77]"></a>SeeedStudioTFTv2::~SeeedStudioTFTv2()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZN16SeeedStudioTFTv2D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SeeedStudioTFTv2::~SeeedStudioTFTv2() &rArr; mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_TFT)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
</UL>
<P><STRONG><a name="[15c]"></a>SeeedStudioTFTv2::~SeeedStudioTFTv2__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN16SeeedStudioTFTv2D1Ev), UNUSED)

<P><STRONG><a name="[15d]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[94]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[fe]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[95]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillrect(int, int, int, int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::pixel(int, int, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::cls()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::character(int, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[f0]"></a>mbed::SPI::format(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI6formatEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SPI::format(int, int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillrect(int, int, int, int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::pixel(int, int, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::cls()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::character(int, int, int)
</UL>

<P><STRONG><a name="[f7]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SPI::frequency(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
</UL>

<P><STRONG><a name="[fc]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[15e]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[7e]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 5]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7f]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 5]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7d]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> seeedstudiotftv2.o(.constdata__ZTV16SeeedStudioTFTv2)
<LI> spi_tft_ili9341.o(.constdata__ZTV15SPI_TFT_ILI9341)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[104]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; __c89vfprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[e8]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
</UL>

<P><STRONG><a name="[15f]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[96]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeedStudioTFTv2::~SeeedStudioTFTv2()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[10e]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[10a]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[10c]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[160]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[97]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[161]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[107]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[162]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[98]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[10d]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[10f]"></a>mbed::FilePath::file()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[12e]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[110]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[12f]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[111]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[163]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[ea]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
</UL>

<P><STRONG><a name="[112]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[114]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[164]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[eb]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::TextDisplay__sub_object(const char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[165]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[166]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[116]"></a>__0vfprintf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>__1vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[168]"></a>__2vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[106]"></a>__c89vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[132]"></a>vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[122]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[81]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 5]<UL><LI> graphicsdisplay.o(.constdata__ZTV15GraphicsDisplay)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> textdisplay.o(.constdata__ZTV11TextDisplay)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[118]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinl
</UL>

<P><STRONG><a name="[11f]"></a>__hardfp_sinl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sinl.o(i.__hardfp_sinl))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sinl &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[11d]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[121]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[11e]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[11b]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[11a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[123]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[169]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[119]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[109]"></a>fclose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fclose_f.o(i._fclose$full))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[105]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fflush_f.o(i._fflush$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[108]"></a>fopen</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fopen_f.o(i._fopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[127]"></a>freopen</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fopen_f.o(i._freopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[124]"></a>_sys_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[a2]"></a>_sys_open</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[125]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[a4]"></a>_sys_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[e6]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
</UL>

<P><STRONG><a name="[133]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[120]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[ba]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[135]"></a>gpio_dir</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = gpio_dir &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[137]"></a>gpio_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[f8]"></a>gpio_init_out</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = gpio_init_out &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[139]"></a>gpio_init_out_ex</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gpio.o(i.gpio_init_out_ex), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[138]"></a>gpio_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[c8]"></a>$Super$$main</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = $Super$$main &rArr; SPI_TFT_ILI9341::fillcircle(int, int, int, int) &rArr; SPI_TFT_ILI9341::vline(int, int, int, int) &rArr; SPI_TFT_ILI9341::wr_cmd(unsigned char) &rArr; mbed::SPI::write(int) &rArr; spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::set_font(unsigned char*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillrect(int, int, int, int, int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::locate(int, int)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::circle(int, int, int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::pixel(int, int, int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::rect(int, int, int, int, int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::line(int, int, int, int, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::cls()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillcircle(int, int, int, int)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::foreground(unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplay::background(unsigned short)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[f1]"></a>mbed_assert_internal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed_assert_internal &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::fillrect(int, int, int, int, int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::pixel(int, int, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::cls()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::wr_cmd(unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::vline(int, int, int, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::hline(int, int, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::character(int, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::window(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[134]"></a>mbed_die</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c7]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>mbed_sdk_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed_sdk_init &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>pin_function</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[13a]"></a>pin_mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>

<P><STRONG><a name="[140]"></a>pinmap_merge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[141]"></a>pinmap_peripheral</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[142]"></a>pinmap_pinout</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[130]"></a>serial_init</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = serial_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[131]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[100]"></a>spi_format</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = spi_format &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[101]"></a>spi_frequency</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spi_frequency &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[103]"></a>spi_init</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spi_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[102]"></a>spi_master_write</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spi_api.o(i.spi_master_write))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[145]"></a>ticker_irq_handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[73]"></a>timer_irq_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_tick.o(i.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[7b]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>us_ticker_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = us_ticker_init &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>us_ticker_irq_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[79]"></a>us_ticker_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>wait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wait_api.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wait &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[fa]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
</UL>

<P><STRONG><a name="[f9]"></a>wait_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TFT_ILI9341::tft_reset()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>__sti___8_main_cpp_TFT</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, main.o(i.__sti___8_main_cpp_TFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = __sti___8_main_cpp_TFT &rArr; SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName) &rArr; SPI_TFT_ILI9341::SPI_TFT_ILI9341(PinName, PinName, PinName, PinName, PinName, PinName, const char*) &rArr; GraphicsDisplay::GraphicsDisplay__sub_object(const char*) &rArr; TextDisplay::TextDisplay__sub_object(const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeedStudioTFTv2::SeeedStudioTFTv2(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[e1]"></a>UART_SetConfig</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13b]"></a>init_spi</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spi_api.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>

<P><STRONG><a name="[128]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[115]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vfprintf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[12b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[70]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
